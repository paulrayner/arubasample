#!/usr/bin/env ruby
$: << File.expand_path("../lib/", __FILE__)

class RenameInfo
  attr_reader :folder
  attr_reader :find_type
  attr_reader :replace_type

  def initialize(folder, find_type, replace_type)
    @folder = folder
    @find_type = find_type
    @replace_type = replace_type
  end
end

def file_type(file_name)
  File.extname(file_name).gsub(/^\./, '').downcase 
end

def file_with_path(path, file_name)
  path + "/" + file_name
end

def rename_file(rename_info, file_name)
	base_name = File.basename(file_name, "." + rename_info.find_type)
	old_name = file_with_path(rename_info.folder, file_name)
	new_name = file_with_path(rename_info.folder, base_name) + "." + rename_info.replace_type
	puts "Renaming #{old_name} to #{new_name}"
	if (File.exists?(new_name))
	 abort("Error: Cannot overwrite file '#{new_name}'")
	end
	File.rename(old_name, new_name)
end

def display_messages(rename_info)
	abort("Error: Folder '#{rename_info.folder}' does not exist") unless File.exists?(rename_info.folder)

	puts "Loading file names from folder: #{rename_info.folder}"
	puts "Replacing file type #{rename_info.find_type} with #{rename_info.replace_type}"
end

def bulk_rename(rename_info)
	display_messages(rename_info)
	Dir.foreach(rename_info.folder) do |file_name|
    if file_type(file_name) == rename_info.find_type.downcase
		  rename_file(rename_info, file_name)
    end
	end
end

if(ARGV.size == 0) then
    puts 'USAGE: bulkrename <folder name> <find_extension> <replace_extension>'
    exit
end

folder = ARGV[0]
find_type = ARGV[1]
replace_type = ARGV[2]

rename_info = RenameInfo.new(folder, find_type, replace_type)

bulk_rename(rename_info)